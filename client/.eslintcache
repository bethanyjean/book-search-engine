[{"C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\index.js":"1","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\App.js":"2","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\pages\\SearchBooks.js":"3","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\components\\Navbar.js":"4","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\pages\\SavedBooks.js":"5","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\components\\SignupForm.js":"6","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\auth.js":"8","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\localStorage.js":"9","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\API.js":"10","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\mutations.js":"11","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\queries.js":"12"},{"size":278,"mtime":1658716549427,"results":"13","hashOfConfig":"14"},{"size":1622,"mtime":1659403529072,"results":"15","hashOfConfig":"14"},{"size":5156,"mtime":1659402642635,"results":"16","hashOfConfig":"14"},{"size":2601,"mtime":1658716549426,"results":"17","hashOfConfig":"14"},{"size":3143,"mtime":1659402499324,"results":"18","hashOfConfig":"14"},{"size":3372,"mtime":1659402513896,"results":"19","hashOfConfig":"14"},{"size":2703,"mtime":1659401826152,"results":"20","hashOfConfig":"14"},{"size":1283,"mtime":1658716549429,"results":"21","hashOfConfig":"14"},{"size":823,"mtime":1658716549430,"results":"22","hashOfConfig":"14"},{"size":1449,"mtime":1658716549428,"results":"23","hashOfConfig":"14"},{"size":875,"mtime":1659394281446,"results":"24","hashOfConfig":"14"},{"size":512,"mtime":1659399500870,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"xsu617",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\index.js",[],["56","57"],"C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\App.js",["58","59"],"import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\nimport SignupForm from './components/SignupForm'\r\nimport loginForm from './components/LoginForm'\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n    <Router>\r\n      <>\r\n      <div className=\"flex-column justify-flex-start min-100-vh\">\r\n        <Navbar />\r\n        <div className=\"container\">\r\n          <Routes>\r\n            <Route \r\n              path='/' \r\n              element={<SearchBooks />} \r\n            />\r\n            <Route \r\n              path='/saved' \r\n              element={<SavedBooks />} \r\n            />\r\n            <Route \r\n              path='*'\r\n              element={<h1 className='display-2'>Wrong page!</h1>} \r\n            />\r\n          </Routes>\r\n          </div>\r\n          </div>\r\n      </>\r\n    </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\pages\\SearchBooks.js",["60","61"],"import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { QUERY_ME, searchGoogleBooks } from '../utils/queries'\r\nimport { SAVE_BOOK } from '../utils/mutations'\r\nimport { useQuery } from '@apollo/client';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\nimport { useMutation } from '@apollo/client';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState('');\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n  const { username: userParam } = useParams();\r\n  const { loading, data } = useQuery(QUERY_ME, {\r\n    variables: { username: userParam },\r\n  });\r\n  const [saveBook] = useMutation(SAVE_BOOK);\r\n\r\n  const user = data?.me || data?.user || {};\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getProfile() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await saveBook({\r\n        variables: {bookId}\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    };\r\n\r\n\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\components\\Navbar.js",[],"C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\pages\\SavedBooks.js",["62","63"],"import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { QUERY_ME } from '../utils/queries'\r\nimport { REMOVE_BOOK } from '../utils/mutations'\r\nimport { useQuery } from '@apollo/client';\r\nimport { removeBookId } from '../utils/localStorage';\r\nimport { useMutation } from '@apollo/client';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst SavedBooks = (props) => {\r\n  const { username: userParam } = useParams();\r\n  const [userData, setUserData] = useState({});\r\n  const [removeBook] = useMutation(REMOVE_BOOK);\r\n  const { loading, data } = useQuery( QUERY_ME, {\r\n    variables: { username: userParam },\r\n  });\r\n  \r\n  // use this to determine if `useEffect()` hook needs to run again\r\n  const userDataLength = Object.keys(userData).length;\r\n  const user = data?.me || data?.user || {};\r\n\r\n  useEffect(() => {\r\n    const getUserData = async () => {\r\n      try {\r\n        const token = Auth.loggedIn() ? Auth.getProfile() : null;\r\n\r\n        if (!token) {\r\n          return false;\r\n        }\r\n\r\n        setUserData(user);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    getUserData();\r\n  }, [userDataLength]);\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getProfile() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await removeBook({\r\n        variables: { bookId },      \r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    \r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (!userDataLength) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\components\\SignupForm.js",["64"],"import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [addUser, { error }] = useMutation(ADD_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n\r\n    \r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\components\\LoginForm.js",["65"],"// see SignupForm.js for comments\r\nimport React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\n\r\nimport Auth from '../utils/auth';\r\nimport { useMutation } from '@apollo/client';\r\nimport { LOGIN_USER } from '../utils/mutations';\r\n\r\n\r\nconst LoginForm = (props) => {\r\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [login, { error }] = useMutation(LOGIN_USER);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login ({\r\n        variables: { ...userFormData },\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n};\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\auth.js",[],"C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\localStorage.js",[],"C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\API.js",[],"C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\mutations.js",[],"C:\\Users\\bbgri\\OneDrive\\Desktop\\projects\\book-search-engine\\client\\src\\utils\\queries.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":13,"column":8,"nodeType":"72","messageId":"73","endLine":13,"endColumn":18},{"ruleId":"70","severity":1,"message":"74","line":14,"column":8,"nodeType":"72","messageId":"73","endLine":14,"endColumn":17},{"ruleId":"70","severity":1,"message":"75","line":21,"column":11,"nodeType":"72","messageId":"73","endLine":21,"endColumn":18},{"ruleId":"70","severity":1,"message":"76","line":26,"column":9,"nodeType":"72","messageId":"73","endLine":26,"endColumn":13},{"ruleId":"70","severity":1,"message":"75","line":16,"column":11,"nodeType":"72","messageId":"73","endLine":16,"endColumn":18},{"ruleId":"77","severity":1,"message":"78","line":40,"column":6,"nodeType":"79","endLine":40,"endColumn":22,"suggestions":"80"},{"ruleId":"70","severity":1,"message":"81","line":15,"column":21,"nodeType":"72","messageId":"73","endLine":15,"endColumn":26},{"ruleId":"70","severity":1,"message":"81","line":15,"column":19,"nodeType":"72","messageId":"73","endLine":15,"endColumn":24},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'SignupForm' is defined but never used.","Identifier","unusedVar","'loginForm' is defined but never used.","'loading' is assigned a value but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["84"],"'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [user, userDataLength]",{"range":"87","text":"88"},[1247,1263],"[user, userDataLength]"]